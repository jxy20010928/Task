<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd">
    <context:annotation-config/>
    <context:component-scan base-package="com"/>
    <mvc:annotation-driven/>
    <context:property-placeholder location="classpath:driud.properties,classpath:redis.properties" system-properties-mode="NEVER"/>
    <!--配置druid连接池-->
    <bean id="driud" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="url" value="${url}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"/>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"/>
        <!-- 连接池最大空闲 -->
        <!--<property name="maxIdle" value="${maxIdle}"/>-->
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"/>
    </bean>
    <!--以下是给mybatis的配置,数据库对话工厂,mapper映射-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定数据源 -->
        <property name="dataSource" ref="driud"/>
        <!-- 指定mybatis配置文件 -->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml" />-->
        <!-- 指定需要别名的类所在的包名 ，或者在mybatis中配置-->
        <property name="typeAliasesPackage" value="com.bean"/>
        <!-- 扫描所有xml文件，或者在mybatis中配置 -->
        <property name="mapperLocations" value="classpath:com/dao/*.xml"/>
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dao"/>
    </bean>

    <!--将一个类发布为一个RMI服务 -->
    <bean id="myRmi" class="com.rmi.MyRmi">
        <property name="serviceName" value="RMI"/>
        <property name="service" ref="serviceImpl"/>
        <property name="serviceInterface" value="com.service.IService"/>
        <property name="registryPort" value="1099"/>
        <property name="servicePort"  value="2099"/>
        <!--<property name="registryHost" value="222.209.18.135"/>-->
    </bean>

    <!--<bean id="myRmi1" class="com.rmi.MyRmi">-->
        <!--<property name="serviceName" value="RMI"/>-->
        <!--<property name="service" ref="serviceImpl"/>-->
        <!--<property name="serviceInterface" value="com.service.IService"/>-->
        <!--<property name="registryPort" value="1098"/>-->
        <!--&lt;!&ndash;<property name="registryHost" value="192.168.31.213"/>&ndash;&gt;-->
    <!--</bean>-->
    <!--<bean id="exporter" class="org.springframework.remoting.rmi.RmiServiceExporter">-->
        <!--<property name="serviceName" value="RMI"/>-->
        <!--<property name="service" ref="serviceImpl"/>-->
        <!--<property name="serviceInterface" value="com.service.IService"/>-->
        <!--<property name="registryPort" value="1099"/>-->
        <!--<property name="registryHost" value="192.168.31.213"/>-->
    <!--</bean>-->
    <!-- redis连接池 -->
    <bean id="jedisConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxActive}"/>
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>
    <!-- redis连接工厂 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <!--<property name="password" value="${redis.password}"/>-->
        <property name="poolConfig" ref="jedisConfig"/>
    </bean>
    <!-- redis操作模板，这里采用尽量面向对象的模板 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--     如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <!--开启事务-->
        <property name="enableTransactionSupport" value="true"/>
    </bean>
    <!--使用实例工厂方式装载hashOperationss对象-->
    <bean id="hashOperations" factory-bean="redisTemplate" factory-method="opsForHash"/>

</beans>
