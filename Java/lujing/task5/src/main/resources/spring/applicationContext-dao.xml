<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <!-- 配置加载数据源文件 -->
    <context:property-placeholder location="classpath:db.properties,classpath:redis.properties"
                                  ignore-unresolvable="true"/>


    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close" p:password="${jdbc.password}">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
    </bean>

    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"></property>
    </bean>

    <!-- 配置mapper扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="lujing.mapper"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!--&lt;!&ndash;配置memcache&ndash;&gt;-->
    <!--<bean id="memcachedClientBuilder" class="net.rubyeye.xmemcached.XMemcachedClientBuilder">-->
        <!--&lt;!&ndash;Xmemcached是基于java nio的client实现，默认对一个memcached节点只有一个连接&ndash;&gt;-->
        <!--<property name="connectionPoolSize" value="1"/>-->
        <!--&lt;!&ndash;ailure模式是指，当一个memcached节点down掉的时候，发往这个节点的请求将直接失败，而不是发送给下一个有效的memcached节点&ndash;&gt;-->
        <!--<property name="failureMode" value="true"/>-->
        <!--&lt;!&ndash; XMemcachedClientBuilder have two arguments.First is server list,and-->
            <!--second is weights array. &ndash;&gt;-->
        <!--<constructor-arg>-->
            <!--<list>-->
                <!--<bean class="java.net.InetSocketAddress">-->
                    <!--<constructor-arg>-->
                        <!--<value>localhost</value>-->
                    <!--</constructor-arg>-->
                    <!--<constructor-arg>-->
                        <!--<value>11211</value>-->
                    <!--</constructor-arg>-->
                <!--</bean>-->
            <!--</list>-->
        <!--</constructor-arg>-->
        <!--&lt;!&ndash;配置权重比&ndash;&gt;-->
        <!--&lt;!&ndash;<constructor-arg>&ndash;&gt;-->
        <!--&lt;!&ndash;<list>&ndash;&gt;-->
        <!--&lt;!&ndash;<value>${memcached.server1.weight}</value>&ndash;&gt;-->
        <!--&lt;!&ndash;<value>${memcached.server2.weight}</value>&ndash;&gt;-->
        <!--&lt;!&ndash;<value>${memcached.server3.weight}</value>&ndash;&gt;-->
        <!--&lt;!&ndash;<value>${memcached.server4.weight}</value>&ndash;&gt;-->
        <!--&lt;!&ndash;</list>&ndash;&gt;-->
        <!--&lt;!&ndash;</constructor-arg>&ndash;&gt;-->
        <!--&lt;!&ndash;<property name="connectTimeout" value="3000"/>&ndash;&gt;-->

        <!--<property name="commandFactory">-->
            <!--<bean class="net.rubyeye.xmemcached.command.TextCommandFactory"/>-->
        <!--</property>-->

        <!--<property name="sessionLocator">-->
            <!--<bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"/>-->
        <!--</property>-->

        <!--<property name="transcoder">-->
            <!--<bean class="net.rubyeye.xmemcached.transcoders.SerializingTranscoder"/>-->
        <!--</property>-->
    <!--</bean>-->
    <!--&lt;!&ndash; Use factory bean to build memcached client &ndash;&gt;-->
    <!--<bean id="memcachedClient" factory-bean="memcachedClientBuilder"-->
          <!--factory-method="build"-->
          <!--destroy-method="shutdown"/>-->
    <!--&lt;!&ndash;配置redis&ndash;&gt;-->

    <!-- redis连接池 -->
    <bean id="jedisConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--<property name="maxTotal" value="${redis.maxActive}"/>-->
        <!--<property name="maxIdle" value="${redis.maxIdle}"/>-->
        <!--<property name="maxWaitMillis" value="${redis.maxWait}"/>-->
        <!--<property name="testOnBorrow" value="${redis.testOnBorrow}"/>-->
        <!--<property name="testWhileIdle" value="true" />-->
        <!-- 最大连接数 -->
        <property name="maxTotal" value="400" />
        <!-- 最大空闲连接数 -->
        <property name="maxIdle" value="10" />
        <!-- 每次释放连接的最大数目 -->
        <property name="numTestsPerEvictionRun" value="1024" />
        <!-- 释放连接的扫描间隔（毫秒） -->
        <property name="timeBetweenEvictionRunsMillis" value="300" />
        <!-- 连接最小空闲时间 -->
        <property name="minEvictableIdleTimeMillis" value="1800000" />
        <!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
        <property name="softMinEvictableIdleTimeMillis" value="1000" />
        <!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
        <property name="maxWaitMillis" value="1500" />
        <!-- 在获取连接的时候检查有效性, 默认false -->
        <property name="testOnBorrow" value="true" />
        <!-- 在空闲时检查有效性, 默认false -->
        <property name="testWhileIdle" value="true" />
        <!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
        <property name="blockWhenExhausted" value="false" />

    </bean>
    <!-- redis连接工厂 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.password}"/>
        <property name="poolConfig" ref="jedisConfig"/>
        <property name="timeout" value="0"/>
    </bean>
    <!-- redis操作模板，这里采用尽量面向对象的模板 -->
        <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--     如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <!--存取hash的时候也要配置-->
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <!--存储Map时value需要的序列化配置-->
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <!--开启事务-->
        <property name="enableTransactionSupport" value="true"/>
    </bean>

</beans>